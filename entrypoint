#!/usr/bin/env python3

# SPDX-FileCopyrightText: 2020 Pier Luigi Fiorini <pierluigi.fiorini@liri.io>
#
# SPDX-License-Identifier: MIT

import json
import os
import requests
import subprocess
import sys


def run(cmd, *args):
    r = subprocess.run(cmd, capture_output=True, *args)
    if r.returncode != 0:
        raise Exception(r.stderr.decode().strip())
    return r


def debug(message):
    # https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-a-debug-message
    print(f'::debug::{message}')


def issue_message(what, message, filename=None, line=None, col=None):
    optional = []
    if filename:
        optional.append(f'file={filename}')
    if line:
        optional.append(f'line={line}')
    if col:
        optional.append(f'col={col}')
    if optional:
        middle = ' ' + ','.join(optional)
    else:
        middle = ''
    print(f'::{what}{middle}::{message}')


def warning(message, **kwargs):
    # https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-a-warning-message
    issue_message('warning', message, **kwargs)


def error(message, **kwargs):
    # https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-error-message
    issue_message('error', message, **kwargs)


def update_status(status, descr):
    # https://developer.github.com/v3/repos/statuses/#create-a-status
    if status not in ('error', 'failure', 'pending', 'success'):
        raise SystemExit('Status can be one of error, failure, pending, success not {}'.format(status))
    github_repository = os.environ['GITHUB_REPOSITORY']
    token = os.environ['GITHUB_TOKEN']
    sha = os.environ['GITHUB_SHA']
    url = f'https://api.github.com/repos/{github_repository}/statuses/{sha}'
    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json',
    }
    data = {
        'state': status,
        'target_url': 'https://github.com/liri-infra/xdg-validator-action',
        'description': descr,
        'context': 'status-check/xdg',
    }
    requests.post(url, headers=headers, json=data)


def list_files(number):
    # https://developer.github.com/v3/pulls/#list-pull-requests-files
    github_repository = os.environ['GITHUB_REPOSITORY']
    url = f'https://api.github.com/repos/{github_repository}/pulls/{number}/files'
    files = requests.get(url).json() or []
    filenames = []
    for entry in files:
        filenames.append(entry['filename'])
    return filenames


def validate(validator, filename):
    if validator == 'appdata':
        run(['appstream-util', 'validate', filename])
        run(['appstream-util', 'validate-strict', filename])
    elif validator == 'desktop':
        run(['desktop-file-validate', filename])


def main():
    github_repository = os.environ['GITHUB_REPOSITORY']
    github_workspace = os.environ['GITHUB_WORKSPACE']
    github_event_path = os.environ['GITHUB_EVENT_PATH']

    payload = json.load(open(github_event_path, 'r'))

    os.chdir(github_workspace)

    update_status('pending', 'Validating XDG files...')

    if 'pull_request' not in payload:
        filenames = list_files(payload['pull_request']['number'])
    else:
        filenames = []
        filenames += glob.glob('**/*.appdata.xml')
        filenames += glob.glob('**/*.desktop')

    error_filenames = []
    for filename in filenames:
        try:
            update_status('pending', f'Checking {filename}...')

            debug(f'Checking {filename}...')
            if filename.endswith('.appdata.xml'):
                validate('appdata', filename)
            elif filename.endswith('.desktop'):
                validate('desktop', filename)
        except:
            error(f'{filename} is not valid', filename=filename)
            error_filenames.append(filename)

    if len(error_filenames) > 0:
        update_status('failure', 'One or more XDG files are not valid')
        return False
    else:
        update_status('success', 'XDG files are valid')
        return True


if __name__ == '__main__':
    if main() is False:
        sys.exit(1)
